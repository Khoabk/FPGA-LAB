module zero_one_zero_detector(input clk, input bits, input reset, output reg detector);
 reg count[24:0] count=0;
// reg hzout=0;
 reg[2:0] state=0,next_state=0;
 
  parameter A = 3'b000, //state encoding
B = 3'b001,
C = 3'b101,
D = 3'b111;


 /*always @(posedge clk)
begin
  if(count>249/*999999)count<=0;
   else count<=count+1;
	
	hzout<=(count>124/*99999)?1:0;
  
  
 end*/
 
 
 
 always @(posedge clk/*hzout*/,negedge reset)
 if(reset==0)state<=0; else state <=next_state;
 
always @(state, bits)
begin

detector=0;
next_state=A;




case(state)

A: begin 
    if(bits)   next_state=A;    
	 else  next_state=B;    
   end

B: begin 
    if(bits)   next_state=C;    
	 else  next_state=B,   
   end
	
C: begin 
    if(bits)  next_state=A;    
	 else begin next_state=D,   end 
   end

D: begin 
    if(bits) begin   next_state=C;    end
	 else begin next_state=B,  detector=1; end 
   end
  
default : begin next_state=next_state;  detector=detector; end


endcase





end
 


